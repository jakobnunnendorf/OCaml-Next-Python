import React from "react";

export default async function CodeBlock() {
    const pseudoCodeString =
        "// Declare bubble sort function with input type array and return type array\nFUNCTION bubble_sort(Numbers: ARRAY)\n  DECLARE NumUnsorted, Index, TempNumber: INTEGER\n  DECLARE IsSorted: BOOLEAN\n  NumUnsorted <- LENGTH(Numbers) - 1\n  REPEAT\n    IsSorted <- TRUE\n    FOR Index <- 1 TO NumUnsorted\n      IF Numbers[Index] > Numbers[Index + 1] THEN\n        TempNumber <- Numbers[Index]\n        Numbers[Index] <- Numbers[Index + 1]\n        Numbers[Index + 1] <- TempNumber\n        IsSorted <- FALSE\n      ENDIF\n    NEXT Index\n    NumUnsorted <- NumUnsorted - 1\n  UNTIL IsSorted = TRUE\n  RETURN Numbers\nENDFUNCTION\n\n// Declare our variables\nDECLARE NumOfFloors, NewFloor, i: INTEGER\nDECLARE IsInArray: BOOLEAN\nDECLARE FloorRequestArray: ARRAY[0:NumOfFloors]\nNumOfFloors <- 4\n\n// Create a function that takes in floor requests\nFUNCTION make_floor_request(NewFloor: INTEGER, FloorRequestArray: ARRAY)\n  NewFloor <- INPUT(\"Enter a floor\")\n  IsInArray <- FALSE\n  FOR i <- 0 TO LENGTH(FloorRequestArray)\n    IF FloorRequestArray[i] = NewFloor THEN\n      IsInArray <- TRUE\n    ENDIF\n  NEXT i\n  IF IsInArray = FALSE THEN\n    INSERT NewFloor INTO FloorRequestArray\n    FloorRequestArray <- bubble_sort(FloorRequestArray)\n  ENDIF\n  RETURN FloorRequestArray\nENDFUNCTION\n\n// Create a function that processes the floor requests\nDECLARE ElevatorDirection: STRING\nDECLARE CurrentFloor, NextFloor: INTEGER\nElevatorDirection <- \"idle\"\nCurrentFloor <- 1\n\nFUNCTION floor_request_process(FloorRequestArray: ARRAY)\n  FUNCTION return_next_higher_floor()\n    DECLARE i: INTEGER\n    i <- 0\n    WHILE CurrentFloor < FloorRequestArray[i] DO\n      NextFloor <- FloorRequestArray[i]\n      i <- i + 1\n    ENDWHILE\n  ENDFUNCTION\n\n  FUNCTION return_next_lower_floor()\n    DECLARE i: INTEGER\n    i <- 0\n    WHILE CurrentFloor > FloorRequestArray[i] DO\n      NextFloor <- FloorRequestArray[i-1]\n      i <- i + 1\n    ENDWHILE\n  ENDFUNCTION\n\n  IF ElevatorDirection = 'DOWN' THEN\n    return_next_lower_floor()\n  ELSE\n    return_next_higher_floor()\n  ENDIF\nENDFUNCTION\n\nDECLARE DoorOpen: BOOLEAN\nDoorOpen <- FALSE\n\nFUNCTION elevator_carrying_out_request(FloorRequestArray: ARRAY)\n  SWITCH NextFloor\n    CASE NextFloor > CurrentFloor THEN\n      ElevatorDirection <- 'UP'\n      CurrentFloor <- CurrentFloor + 1\n      elevator_carrying_out_request(FloorRequestArray)\n    CASE NextFloor = CurrentFloor THEN\n      DoorOpen <- TRUE\n      DoorOpen <- FALSE\n      floor_request_process(FloorRequestArray)\n      elevator_carrying_out_request(FloorRequestArray)\n    CASE NextFloor < CurrentFloor THEN\n      ElevatorDirection <- 'DOWN'\n      CurrentFloor <- CurrentFloor - 1\n      elevator_carrying_out_request(FloorRequestArray)\n  ENDSWITCH\nENDFUNCTION";

    return (
        <pre className="p-4 text-orange-300 rounded-md w-fit bg-slate-900">
            {pseudoCodeString}
        </pre>
    );
}
